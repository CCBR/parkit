#!/usr/bin/env bash

# set -exo pipefail

JID=""

required_argument(){
f=$1
argument=$2
if [ -z "$f" ]; then
echo "$argument is required!"
exit 1
fi
}

run_sbatch_cmd(){
cmd="$1"
dependency="$2"
jobname="$3"
hpcdmutilspath="$4"
# Write the script to a temporary file
temp_script=$(mktemp)
cat << EOF > "$temp_script"
#!/bin/bash
${SOURCE_CONDA_CMD}
# conda activate parkit_dev
conda activate parkit
export HPC_DM_UTILS=${hpcdmutilspath}
echo \$HPC_DM_UTILS
which parkit
$cmd
EOF
# Make the temporary script executable
chmod +x "$temp_script"
cat $temp_script
# Submit the script to sbatch
sbatchcmd=$(
cat << EOF
sbatch \
    --output="${jobname}.%j.out" \
    --error="${jobname}.%j.err" \
    --job-name="${jobname}" \
    --mail-type=BEGIN,END \
    --mem=120g \
    --partition="ccr,norm" \
    --time=24:00:00 \
    --cpus-per-task=2 ${dependency} \
    "$temp_script"
EOF
)
# Output and capture the job ID as needed
echo $sbatchcmd
jobid=$(eval $sbatchcmd)
echo "$jobname: Job submitted with jobid: $jobid"

# cleanup
rm "$temp_script"

JID="$jobid"
}

SCRIPTNAME="$BASH_SOURCE"
SCRIPTDIRNAME=$(readlink -f $(dirname "$SCRIPTNAME"))

# add "bin" to PATH
if [[ ":$PATH:" != *":${SCRIPTDIRNAME}:"* ]];then
	export PATH=${PATH}:${SCRIPTDIRNAME}
fi

# rely on redirect to be redirect to the python script
RESOURCEDIR=$(dirname "$SCRIPTDIRNAME")
TOOLDIR="$SCRIPTDIRNAME"
TOOLNAME="parkit"
# PARKIT="${TOOLDIR}/${TOOLNAME}"
PARKIT="parkit"
if [ -z "${SOURCE_CONDA_CMD}" ];then
    echo "SOURCE_CONDA_CMD env variable must be set"
    exit 1
fi


# Test if parkit is working
${PARKIT} > /dev/null 2>&1 || { echo "${PARKIT} not found or cannot be run!"; exit 1; }

ARGPARSE_DESCRIPTION="End-to-end parkit: Folder 2 HPCDME"
source ${RESOURCEDIR}/resources/argparse.bash || exit 1
argparse "$@" <<EOF || exit 1
parser.add_argument('--restartfrom',required=False, help='if restarting then restart from this step. Options are: createemptycollection, createmetadata, deposittar')
parser.add_argument('--executor',required=False,default='local', help='slurm or local')
parser.add_argument('--folder',required=False, help='project folder to archive')
parser.add_argument('--dest',required=False, help='vault collection path (Analysis goes under here!)')
parser.add_argument('--projectdesc',required=False, help='project description')
parser.add_argument('--projecttitle',required=False, help='project title')
parser.add_argument('--rawdata',action='store_true', help='If tarball is rawdata and needs to go under folder Rawdata')
parser.add_argument('--cleanup',action='store_true', help='post transfer step to delete local files')
parser.add_argument('--makereadme',action='store_true', help='make readme file with destination location on vault')
parser.add_argument('--hpcdmutilspath', required=True, help='what should be the value of env var HPC_DM_UTILS')
parser.add_argument('--version',action='store_true', help='print version')
EOF

if [[ "$VERSION" == "yes" ]];then
    ${PARKIT} --version
    exit 0
fi

# folder is required
required_argument "$FOLDER" "--folder"
TARBALL="${FOLDER}.tar"
README="${FOLDER}.README"

# cleanup option
if [[ "${CLEANUP}" == "yes" ]];then
    for f in "${TARBALL}"* *response-header.tmp *response-message.json.tmp
    do
	if [[ "$f" != "${TARBALL}.filelist" ]];then
          rm -iv $f
        fi
    done
    exit 0
fi

# check executor
if [[ "$EXECUTOR" == "slurm" || "$EXECUTOR" == "local" ]]; then
    if [[ "$EXECUTOR" == "slurm" ]]; then
        which sbatch > /dev/null 2>&1
        if [[ "$?" != "0" ]]; then
            echo "\"sbatch\" cannot be found!"
            echo "--executor can only be \"local\""
            exit 1
        fi
    fi
else
    echo "--executor can only be \"slurm\" or \"local\"."
    exit 1
fi

# dest is required
required_argument "$DEST" "--dest"

# figure out what needs to run
RUN_createtar=0
RUN_createemptycollection=0
RUN_createmetadata=0
RUN_deposittar=0
if [ -z "$RESTARTFROM" ];then
    RUN_createtar=1
    RUN_createemptycollection=1
    RUN_createmetadata=1
    RUN_deposittar=1
    required_argument "$PROJECTDESC" "--projectdesc"
    required_argument "$PROJECTTITLE" "--projecttitle"
elif [ "$RESTARTFROM" == "createemptycollection" ];then
    RUN_createtar=0
    RUN_createemptycollection=1
    RUN_createmetadata=1
    RUN_deposittar=1
    required_argument "$PROJECTDESC" "--projectdesc"
    required_argument "$PROJECTTITLE" "--projecttitle"
elif [ "$RESTARTFROM" == "createmetadata" ];then
    RUN_createtar=0
    RUN_createemptycollection=0
    RUN_createmetadata=1
    RUN_deposittar=1
elif [ "$RESTARTFROM" == "deposittar" ];then
    RUN_createtar=0
    RUN_createemptycollection=0
    RUN_createmetadata=0
    RUN_deposittar=1
else
    echo "--restartfrom options are createemptycollection, createmetadata, deposittar"
    exit 1
fi

# run or submit runs
jobids=""
dependency=""

# $RUN_createtar
if [[ "$RUN_createtar" == "1" ]]; then
echo "################ Running createtar #############################"
    cmd="${PARKIT} createtar --folder \"${FOLDER}\""
    echo $cmd
    if [[ "$EXECUTOR" == "local" ]];then
        eval "$cmd"
        if [[ "$?" != "0" ]];then
            exit 1
        fi
    else
        run_sbatch_cmd "$cmd" "$dependency" "createtar" "$HPCDMUTILSPATH"
        jid="$JID"
        if [[ "$jid" == "" ]];then exit 1;fi    # stop if job is NOT submitted.
        if [[ "$jobids" == "" ]];then
            jobids="$jid"
        else
            jobids="$jobids:$jid"
        fi
    fi
echo "################################################################"
fi # $RUN_createtar ends

# RUN_createemptycollection
if [[ "$RUN_createemptycollection" == "1" ]];then
echo "############ Running createemptycollection ######################"
    cmd="${PARKIT} createemptycollection --dest \"${DEST}\" --projectdesc \"${PROJECTDESC}\" --projecttitle \"${PROJECTTITLE}\""
    echo $cmd
    if [[ "$EXECUTOR" == "local" ]];then
        eval "$cmd"
        if [[ "$?" != "0" ]];then
            exit 1
        fi
    else
        dependency=""
        if [[ "$jobids" != "" ]];then
            dependency="--dependency=afterok:${jobids}"
        fi
        run_sbatch_cmd "$cmd" "$dependency" "createemptycollection" "$HPCDMUTILSPATH"
        jid="$JID"
        if [[ "$jid" == "" ]];then exit 1;fi    # stop if job is NOT submitted.
        if [[ "$jobids" == "" ]];then
            jobids="$jid"
        else
            jobids="$jobids:$jid"
        fi
    fi
echo "################################################################"
fi # RUN_createemptycollection ends

# RUN_createmetadata
if [[ "$RUN_createmetadata" == "1" ]];then
echo "########### Running createmetadata ##############################"
    cmd="${PARKIT} createmetadata --tarball \"${TARBALL}\" --dest \"${DEST}\""
    if [[ "${RAWDATA}" == "yes" ]];then
        cmd="${cmd} --collectiontype \"Rawdata\""
    fi
        echo $cmd
    if [[ "$EXECUTOR" == "local" ]];then
        eval "$cmd"
        if [[ "$?" != "0" ]];then
            exit 1
        fi
    else
        dependency=""
        if [[ "$jobids" != "" ]];then
            dependency="--dependency=afterok:${jobids}"
        fi
        run_sbatch_cmd "$cmd" "$dependency" "createmetadata" "$HPCDMUTILSPATH"
        jid="$JID"
        if [[ "$jid" == "" ]];then exit 1;fi    # stop if job is NOT submitted.
        if [[ "$jobids" == "" ]];then
            jobids="$jid"
        else
            jobids="$jobids:$jid"
        fi
    fi
echo "################################################################"
fi # RUN_createmetadata ends

# RUN_deposittar
if [[ "$RUN_deposittar" == "1" ]];then
echo "############# Running deposittar ###############################"
    cmd="${PARKIT} deposittar --tarball \"${TARBALL}\" --dest \"${DEST}\""
    if [[ "${RAWDATA}" == "yes" ]];then
        cmd="${cmd} --collectiontype \"Rawdata\""
    fi
    echo $cmd
    if [[ "$EXECUTOR" == "local" ]];then
        eval "$cmd"
        if [[ "$?" != "0" ]];then
            exit 1
        fi
    else
        dependency=""
        if [[ "$jobids" != "" ]];then
            dependency="--dependency=afterok:${jobids}"
        fi
        run_sbatch_cmd "$cmd" "$dependency" "deposittar" "$HPCDMUTILSPATH"
        jid="$JID"
        if [[ "$jid" == "" ]];then exit 1;fi    # stop if job is NOT submitted.
        if [[ "$jobids" == "" ]];then
            jobids="$jid"
        else
            jobids="$jobids:$jid"
        fi
    fi
    if [[ "${MAKEREADME}" == "yes" ]];then
      echo "${TARBALL} parked at ${DEST} on HPCDME!" >> "${README}"
    fi
echo "################################################################"
fi # RUN_deposittar ends
